- name: wipe ca directory if force_regenerate_ca_cert is set
  file:
    dest: /opt/kubelini/ca
    state: absent
  when: force_regenerate_ca_cert

- name: create ca folder
  file:
    dest: /opt/kubelini/ca
    state: directory

- name: create admin admin_kubeconfig folder
  file:
    dest: /opt/kubelini/admin_kubeconfig
    state: directory

- name: create bootstrap token folder
  file:
    dest: /opt/kubelini/bootstrap_token
    state: directory

- name: template ca config
  template:
    src: ca-config.json.j2
    dest: /opt/kubelini/ca/ca-config.json

- name: template ca config
  template:
    src: ca-csr.json.j2
    dest: /opt/kubelini/ca/ca-csr.json

- name: Download ca cert from s3 if it exists
  s3:
    bucket: "{{ s3_sync_bucket }}"
    object: "{{ cluster_id }}/ca/{{ item }}"
    dest: "/opt/kubelini/ca/{{ item }}"
    mode: get
    aws_access_key: "{{ aws_access_key_id | default(omit) }}"
    aws_secret_key: "{{ aws_secret_access_key | default(omit) }}"
  with_items:
  - ca.pem
  - ca-key.pem
  ignore_errors: true
  register: download_existing_ca_certs_result

- name: Generate ca cert
  shell: "cfssl gencert -initca ca-csr.json | cfssljson -bare ca"
  args:
    chdir: /opt/kubelini/ca
    creates: ca.pem

- name: template admin csr config
  template:
    src: admin-csr.json.j2
    dest: /opt/kubelini/ca/admin-csr.json

- name: Generate admin cert
  shell: >
    cfssl gencert
    -ca=ca.pem
    -ca-key=ca-key.pem
    -config=ca-config.json
    -profile=kubernetes
    admin-csr.json | cfssljson -bare admin
  args:
    chdir: /opt/kubelini/ca
    creates: admin.pem

- name: template kube-proxy csr config
  template:
    src: kube-proxy-csr.json.j2
    dest: /opt/kubelini/ca/kube-proxy-csr.json

- name: Generate kube-proxy cert
  shell: >
    cfssl gencert
    -ca=ca.pem
    -ca-key=ca-key.pem
    -config=ca-config.json
    -profile=kubernetes
    kube-proxy-csr.json | cfssljson -bare kube-proxy
  args:
    chdir: /opt/kubelini/ca
    creates: kube-proxy.pem

- name: Generate admin kubeconfig
  script: generate_admin_kubeconfig.sh "{{ kubernetes_cluster_address }}" "{{ cluster_id }}"


- name: Upload ca cert to s3
  s3_sync:
    bucket: "{{ s3_sync_bucket }}"
    file_root: /opt/kubelini/ca
    key_prefix: "{{ cluster_id }}/ca"
    file_change_strategy: checksum
    include: "ca*.pem"
    aws_access_key: "{{ aws_access_key_id | default(omit) }}"
    aws_secret_key: "{{ aws_secret_access_key | default(omit) }}"
    region: "{{ aws_region }}"

- name: Upload bootstrap token to s3
  s3_sync:
    bucket: "{{ s3_sync_bucket }}"
    file_root: /opt/kubelini/bootstrap_token
    key_prefix: "{{ cluster_id }}/bootstrap"
    file_change_strategy: checksum
    include: "*.csv"
    aws_access_key: "{{ aws_access_key_id | default(omit) }}"
    aws_secret_key: "{{ aws_secret_access_key | default(omit) }}"
    region: "{{ aws_region }}"

- name: Upload bootstrap token to s3
  s3_sync:
    bucket: "{{ s3_sync_bucket }}"
    file_root: /opt/kubelini/bootstrap_token
    key_prefix: "{{ cluster_id }}/bootstrap"
    file_change_strategy: checksum
    include: "*.kubeconfig"
    aws_access_key: "{{ aws_access_key_id | default(omit) }}"
    aws_secret_key: "{{ aws_secret_access_key | default(omit) }}"
    region: "{{ aws_region }}"

- name: Upload admin certs to s3
  s3_sync:
    bucket: "{{ s3_sync_bucket }}"
    file_root: /opt/kubelini/ca
    key_prefix: "{{ cluster_id }}/admin"
    file_change_strategy: checksum
    include: "*admin*.*"
    aws_access_key: "{{ aws_access_key_id | default(omit) }}"
    aws_secret_key: "{{ aws_secret_access_key | default(omit) }}"
    region: "{{ aws_region }}"

- name: Upload admin kubeconfig to s3
  s3_sync:
    bucket: "{{ s3_sync_bucket }}"
    file_root: /opt/kubelini/admin_kubeconfig
    key_prefix: "{{ cluster_id }}/admin"
    file_change_strategy: checksum
    include: "*.*"
    aws_access_key: "{{ aws_access_key_id | default(omit) }}"
    aws_secret_key: "{{ aws_secret_access_key | default(omit) }}"
    region: "{{ aws_region }}"
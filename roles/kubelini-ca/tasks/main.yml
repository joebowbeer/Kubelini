- name: create ca folder
  file:
    dest: /opt/kubelini/ca
    state: directory

- name: Copy ca from downloads file
  copy:
    src: "/opt/kubelini/pki_downloads/{{ item }}"
    dest: "/opt/kubelini/ca/{{ item }}"
    remote_src: true
  with_items:
    - "ca.pem"
    - "ca-key.pem"

- name: create bootstrap token folder
  file:
    dest: /opt/kubelini/bootstrap_token
    state: directory

- name: template ca config
  template:
    src: ca-config.json.j2
    dest: /opt/kubelini/ca/ca-config.json

- name: template ca-csr config
  template:
    src: ca-csr.json.j2
    dest: /opt/kubelini/ca/ca-csr.json

- name: template admin csr config
  template:
    src: admin-csr.json.j2
    dest: /opt/kubelini/ca/admin-csr.json

- name: Generate admin cert
  shell: >
    cfssl gencert
    -ca=ca.pem
    -ca-key=ca-key.pem
    -config=ca-config.json
    -profile=kubernetes
    admin-csr.json | cfssljson -bare admin
  args:
    chdir: /opt/kubelini/ca
    creates: admin.pem

- name: template kube-proxy csr config
  template:
    src: kube-proxy-csr.json.j2
    dest: /opt/kubelini/ca/kube-proxy-csr.json

- name: Generate kube-proxy cert
  shell: >
    cfssl gencert
    -ca=ca.pem
    -ca-key=ca-key.pem
    -config=ca-config.json
    -profile=kubernetes
    kube-proxy-csr.json | cfssljson -bare kube-proxy
  args:
    chdir: /opt/kubelini/ca
    creates: kube-proxy.pem

- name: Delete existing node cert
  file:
    path: "/opt/kubelini/pki/{{ inventory_hostname }}-csr.json"
    state: absent
  when: force_recreate_node_cert

- name: Generate node cert
  shell: >
    sudo cfssl gencert
    -ca=/opt/kubelini/ca/ca.pem
    -ca-key=/opt/kubelini/ca/ca-key.pem
    -config=/opt/kubelini/ca/ca-config.json
    -profile=kubernetes
    {{ inventory_hostname }}-csr.json | sudo cfssljson -bare {{ item }}
  args:
    chdir: /opt/kubelini/pki
    creates: "{{ item }}.pem"
  with_items:
  - "{{ inventory_hostname }}"

- name: create kubectl bootstrap
  script: generate_kubeconfig.sh "{{ kubernetes_cluster_address }}"
  args:
    creates: /opt/kubelini/bootstrap_token/bootstrap.kubeconfig
  failed_when: False

- name: create kube-proxy bootstrap
  script: generate_kubeproxy_config.sh "{{ kubernetes_cluster_address }}"
  args:
    creates: /opt/kubelini/bootstrap_token/kube-proxy.kubeconfig
  failed_when: False
  

- name: Add users to static csv
  lineinfile:
    dest: /opt/kubelini/bootstrap_token/token.csv
    regexp: "^{{ item['password'] }}"
    line: "{{ item['password'] }},{{ item['user'] }},{{ item['uid'] }},\"{{ item['group'] }}\""
  with_items: "{{ additional_kubernetes_static_users }}"
  when: additional_kubernetes_static_users is defined
  no_log: True

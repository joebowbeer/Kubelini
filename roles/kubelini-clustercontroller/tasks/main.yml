- name: Set default version flags
  set_fact:
    _is_1_10_or_greater: false

- name: Check if kubernetes version flag
  set_fact:
    _is_1_10_or_greater: "{{ kubernetes_version is version('1.10.0', '>=') }}"

- name: Set admission control param flag for > 1.10.0
  set_fact:
    _admission_controller_param_name: "--enable-admission-plugins"
  when: _is_1_10_or_greater | bool

- name: Set admission control param flag for < 1.10.0
  set_fact:
    _admission_controller_param_name: "--admission-control"
  when: not (_is_1_10_or_greater | bool)

- name: Copy kubernetes files into the bin folder
  copy:
    src: "{{ item }}"
    dest: /usr/bin/
    mode: a+x
    remote_src: yes
  with_items:
  - "/opt/kubelini/kube-apiserver"
  - "/opt/kubelini/kube-controller-manager"
  - "/opt/kubelini/kube-scheduler"
  - "/opt/kubelini/kubectl"

- name: create kubernetes folder
  file:
    dest: /var/lib/kubernetes
    state: directory

- name: get local ip address
  set_fact:
    local_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    etcd_ips: "{% for h in groups['kubernetes_master'] %}https://{{ hostvars[h]['ansible_default_ipv4']['address'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}"

- name: Get the number of apiserver nodes
  set_fact:
    api_servers_count: "{{ groups['kubernetes_master'] | length }}"

- name: template apiserver config
  template:
    src: kube-apiserver.service.j2
    dest: /etc/systemd/system/kube-apiserver.service
  notify:
  - reload kube-apiserver
  when: not apiserver_run_in_pod | bool

- name: create kubelet folders
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
  - /etc/kubernetes
  - /etc/kubernetes/manifests

- name: #Prep masters as a kubernetes node
  when: apiserver_run_in_pod | bool
  block:
  - name: Configure PKI for kubelet/worker
    include_role:
      name: kubelini-worker-pki

  - name: Template kube-apiserver to run in kubelet
    template:
      src: kube-apiserver.yml.j2
      dest: /etc/kubernetes/manifests/kube-apiserver.yaml
    register: kube_apiserver_changed

  - name: Configure local kubelet/worker with master taint
    include_role:
      name: kubelini-worker-kubelet
    vars:
      kubelet_role: 'master'
      worker_check_ready: no
      kubelet_node_labels:
      - "ansible/inventory-hostname={{ inventory_hostname }}"
      - "node-role.kubernetes.io/master=''"
      - "kubernetes.io/role=master"
      kubelet_register_with_taints: 'node-role.kubernetes.io/master=:NoSchedule'
  #end block

- name: template controller-manager config
  template:
    src: kube-controller-manager.service.j2
    dest: /etc/systemd/system/kube-controller-manager.service
  notify:
  - reload kube-controller-manager

- name: template kube-scheduler config
  template:
    src: kube-scheduler.service.j2
    dest: /etc/systemd/system/kube-scheduler.service
  notify:
  - reload kube-scheduler

- name: trigger handlers
  meta: flush_handlers

- name: start kube-controller-manager service
  service:
    name: kube-controller-manager
    state: started

- name: check apiserver service state
  service_facts:

- name: start apiserver service
  service:
    name: kube-apiserver
    state: started
  when: not apiserver_run_in_pod | bool

- name: stop apiserver service if installed
  service:
    name: kube-apiserver
    state: stopped
  when: (apiserver_run_in_pod | bool) and ('kube-apiserver.service' in services)

- name: remove apiserver service if installed (only when transitioning to in-pod kube-apiserver)
  shell: rm /etc/systemd/system/kube-apiserver.service && systemctl daemon-reload
  when: (apiserver_run_in_pod | bool) and ('kube-apiserver.service' in services)

- name: start kube-scheduler service
  service:
    name: kube-scheduler
    state: started

- name: template the bootstrap clusterrole
  template:
    src: bootstrap_clusterrole.yml.j2
    dest: /opt/kubelini/bootstrap_clusterrole.yml

- name: create the bootstrap clusterrole
  shell: kubectl apply -f /opt/kubelini/bootstrap_clusterrole.yml
  until: clusterrole_bootstrap_result.rc == 0
  register: clusterrole_bootstrap_result
  retries: 10
  delay: 10
  ignore_errors: yes
  run_once: true

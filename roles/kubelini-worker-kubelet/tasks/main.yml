- name: Copy kubernetes worker files into the bin folder
  copy:
    src: "{{ item }}"
    dest: /usr/bin/
    mode: a+x
    remote_src: yes
  with_items:
  - "/opt/kubelini/kubelet"
  - "/opt/kubelini/kube-proxy"
  - "/opt/kubelini/kubectl"

- name: template the bootstrap clusterrole
  template:
    src: bootstrap_clusterrole.yml.j2
    dest: /opt/kubelini/bootstrap_clusterrole.yml
  delegate_to: "{{ groups.kubernetes_master[0] }}"
  run_once: true

- name: create the bootstrap clusterrole
  shell: kubectl apply -f /opt/kubelini/bootstrap_clusterrole.yml
  delegate_to: "{{ groups.kubernetes_master[0] }}"
  run_once: true

- name: Set cluster infor to the internal ip of the first controller if not specified
  set_fact:
    kubernetes_cluster_address: "{{ hostvars[groups['kubernetes_master'][0]]['ansible_eth0']['ipv4']['address'] }}"
  when: not kubernetes_cluster_address is defined

- name: Generate local kubeconfig
  script: generate_node_kubeconfig.sh "{{ kubernetes_cluster_address }}"
  args:
    creates: "/opt/kubelini/{{ inventory_hostname }}.kubeconfig"

- name: create kubelet folders
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
  - /var/lib/kubelet
  - /var/lib/kube-proxy
  - /var/lib/kubernetes
  - /var/run/kubernetes

- name: Copy the kubelet kubeconfig file
  copy:
    src: "/opt/kubelini/{{ inventory_hostname }}.kubeconfig"
    dest: "/var/lib/kubelet/{{ inventory_hostname }}.kubeconfig"
    remote_src: yes

- name: copy kube-proxy bootstrap file
  copy:
    src: /opt/kubelini/downloads/kube-proxy.kubeconfig
    dest: /var/lib/kube-proxy/
    remote_src: yes

- name: copy bootstrap files
  copy:
    src: /opt/kubelini/downloads/bootstrap.kubeconfig
    dest: /var/lib/kubelet/
    remote_src: yes

- name: copy cert files to kubernetes dir
  copy:
    src: "{{ item }}"
    dest: /var/lib/kubernetes/
    remote_src: yes
  with_items:
  - /opt/kubelini/pki_downloads/ca.pem
  - "/opt/kubelini/pki_downloads/{{ inventory_hostname }}.pem"
  - "/opt/kubelini/pki_downloads/{{ inventory_hostname }}-key.pem"


- name: create cni dirs
  file:
    dest: "{{ item }}"
    state: directory
  with_items:
    - /opt/cni
    - /opt/cni/bin
    - /etc/cni
    - /etc/cni/net.d

- name: template weavenet plugin
  template:
    src: 10-weave.conf.j2
    dest: /etc/cni/net.d/10-weave.conf

- name: download cni plugin
  get_url:
    url: "{{ cni_download_url }}"
    dest: /opt/kubelini/downloads/cni-plugins-amd64-v0.6.0.tgz

- name: unpack cni plugin
  unarchive:
    src: /opt/kubelini/downloads/cni-plugins-amd64-v0.6.0.tgz
    dest: /opt/cni/bin/
    remote_src: yes

- name: download docker
  get_url:
    url: "https://get.docker.com/builds/Linux/x86_64/docker-{{ docker_version }}.tgz"
    dest: /opt/kubelini/docker.tgz

- name: create docker temp folder
  file:
    dest: /opt/kubelini/docker
    state: directory

- name: unpack docker
  unarchive:
    src: /opt/kubelini/docker.tgz
    dest: /opt/kubelini/docker
    remote_src: yes

- name: get docker bin files to copy
  find:
    paths: "/opt/kubelini/docker/docker"
    #recurse: yes
  register: docker_bin_files

- name: copy files to bin
  copy:
    src: "{{ item['path'] }}"
    dest: /usr/bin/
    remote_src: yes
    mode: a+x
  with_items: "{{ docker_bin_files['files'] }}"

- name: Make sure /etc/docker exists
  file:
    dest: /etc/docker
    state: directory

- name: template docker daemon.json
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json

- name: template docker service config
  template:
    src: docker.service.j2
    dest: /etc/systemd/system/docker.service
  notify:
  - reload docker service

- name: make sure we have masters in inventory
  setup:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['kubernetes_master'] }}"

#- name: configure api servers list
#  set_fact:
#    api_servers_list: "{% for h in groups['kubernetes_master'] %}https://{{ hostvars[h]['ansible_default_ipv4']['address'] }}:6443{% if not loop.last %},{% endif %}{% endfor %}"

- name: check if kubelet registration has already been done
  stat:
    path: /var/lib/kubelet/node_registration_checkfile
  register: kubelet_node_registration

#  #start block
#- block:
#  - name: template kubelet service config (registration)
#    template:
#      src: kubelet.service-reg.j2
#      dest: /etc/systemd/system/kubelet.service
#    register: kubelet_reg_changed
#    notify:
#    - reload kubelet service
#
#  - name: create kubelet check file
#    file:
#      path: /var/lib/kubelet/node_registration_checkfile
#      state: touch
#
#  - name: start kubelet service
#    systemd:
#      enabled: yes
#      state: started
#      daemon_reload: yes
#      name: kubelet
#
#  - name: pause while waiting for kubelet to request certificates
#    pause:
#      seconds: 20
#    when: auto_node_approval | bool
#
#  - name: pause while waiting kubelet
#    pause:
#    when: not (auto_node_approval | bool)
#
#  - name: approve csr
#    script: approve_csr.py
#    delegate_to: "{{ groups.kubernetes_master[0] }}"
#    when: auto_node_approval | bool
#  when: not kubelet_node_registration.stat.exists
#  #end block

- name: template kube-proxy service config
  template:
    src: kube-proxy.service.j2
    dest: /etc/systemd/system/kube-proxy.service
  notify:
  - reload kube-proxy service

- name: trigger handlers
  meta: flush_handlers

- name: start docker service
  service:
    name: docker
    state: started

- name: start kube-proxy service
  service:
    name: kube-proxy
    state: started

- name: template kubelet service config
  template:
    src: kubelet.service.j2
    dest: /etc/systemd/system/kubelet.service
  notify:
  - reload kubelet service

- name: trigger handlers
  meta: flush_handlers

- name: start kubelet service
  service:
    name: kubelet
    state: started

